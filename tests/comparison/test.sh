#!/bin/bash

# This executable proceeds to a test of the b2rust convertor.
# It has to be called with exactly two arguments:
# $1: the name of the test
#     It has to match the regular expression `[a-zA-Z0-9_]+`.
# $2: the path to the b2rust executable.
#     It has to exist. 
# $3: the path to the directory containing the components.
#     It has to exist.
# $4: the name of the module. (So, without any path.)
#     $2/$3.bxml and $2/$3_i.bxml need to exist.
# $5: the path to the "reference", i.e. the Rust program whose content should be exactly the one produced by b2rust with the BXML file. It is not a b2rust created file! 
#     It has to exist.
#     It has to be a file according to the POSIX definition, and thus, have a newline character at its end.
#
# The script has a return number:
# 0:  b2rust has generated a correct code without any error.
# 1:  b2rust has generated an incorrect code.
# 2:  b2rust failed to generate a code.

test_name=$1
b2rust=$2
dir=$3
module=$4
reference=$5


exitme() {
    if [[ -f $temp ]]
    then
	rm $temp
    fi
    rm -drf $file
    exit $1
}

command="$b2rust -i $dir -o $dir $module"

echo -en "[comparison test] Proceeding test \`$test_name\`... Info: you can run yourself the code generation part of the test with the command \033[1m$command\033[0m. " 

cols=$(($(tput cols)-6))
pretty_output() {
    echo -n '┌';
    for ((c=1; c<=$cols+1; c++)); do echo -n '─'; done;
    echo '┐'
    sed -e "s/.\{$cols\}/&↩\n/g" < $1 | while IFS= read -r line
    do
	printf "│%-$(($cols+1))s│\n" "$line"
    done
    # cat $reference
    # echo -n '│'
    # for ((c=1; c<=$cols+1; c++)); do echo -n ' '; done;
    # echo '│'
    echo -n '└'
    for ((c=1; c<=$cols+1; c++)); do echo -n '─'; done;
    echo '┘'
}

file=$dir/$module.rs

# Formatting output...
errors=$($command 2>&1)

# TODO: eventually parse the error code.
if [[ $? -ne 0 ]]
then
    echo -e '\033[1;31m ✖ Test failed.\033[0m'
    echo "An error happened while converting the components. b2rust says the following:"
    # TODO: pretty_output doesn’t work here.
    echo $errors
    exitme 2;
fi

rustfmt $file
rustfmt $reference

#in case we change the translation choice
#cp $dir/$module.rs $dir/"r_"$module.rs


# Formatting the reference...
# TODO_11 Format the reference, but make sure it is still fast...
# rustfmt $reference

cmp -s $file $reference
if [[ $? -eq 0 ]]
then
    echo -e '\033[0;32m✓ Test passed.\033[0m'
    echo "The file produced by $(basename $b2rust) is:"
    pretty_output $file
    exitme 0;
else
    echo -e '\033[1;31m ✖ Test failed.\033[0m'
    echo 'The reference file is'
    pretty_output $reference
    echo "but the file generated by $(basename $b2rust) is:"
    pretty_output $file
    echo $file
    #cp $file /tmp
    echo $reference
    diff="diff $file $reference";
    echo -e "If you don’t see the difference, here’s a `diff` output (info: you can run the `diff` yourself with the command \033[1m$diff\033[0m):"
    temp=$(mktemp)
    $diff > $temp
    # TODO: doesn’t work if `$file` contains fancy characters such as `\` or a grave accent.
    pretty_output $temp
    exitme 1;
fi
